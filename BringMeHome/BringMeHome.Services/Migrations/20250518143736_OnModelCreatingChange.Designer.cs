// <auto-generated />
using System;
using BringMeHome.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BringMeHome.Services.Migrations
{
    [DbContext(typeof(BringMeHomeDbContext))]
    [Migration("20250518143736_OnModelCreatingChange")]
    partial class OnModelCreatingChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BringMeHome.Services.Database.Adopters+Adopter", b =>
                {
                    b.Property<int>("AdopterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdopterID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CantonID")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AdopterID");

                    b.HasIndex("CantonID");

                    b.HasIndex("CityID");

                    b.HasIndex("UserID");

                    b.ToTable("Adopters");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.AdoptionApplication", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<int?>("AdopterID")
                        .HasColumnType("int");

                    b.Property<int>("AnimalID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsAnimalAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LivingSituation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReasonID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewedByStaffID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationID");

                    b.HasIndex("AdopterID");

                    b.HasIndex("AnimalID");

                    b.HasIndex("ReasonID");

                    b.HasIndex("ReviewedByStaffID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UserID");

                    b.ToTable("AdoptionApplications");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Animal", b =>
                {
                    b.Property<int>("AnimalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimalID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BreedID")
                        .HasColumnType("int");

                    b.Property<int?>("ColorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateArrived")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ShelterID")
                        .HasColumnType("int");

                    b.Property<int?>("SpeciesID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("TempermentID")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AnimalID");

                    b.HasIndex("BreedID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ShelterID");

                    b.HasIndex("SpeciesID");

                    b.HasIndex("StatusID");

                    b.HasIndex("TempermentID");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.AnimalStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusID");

                    b.ToTable("AnimalStatuses");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.AnimalTemperament", b =>
                {
                    b.Property<int>("TemperamentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemperamentID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TemperamentID");

                    b.ToTable("AnimalTemperaments");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.ApplicationStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusID");

                    b.ToTable("ApplicationStatuses");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Breed", b =>
                {
                    b.Property<int>("BreedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BreedID"));

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommonHealthIssues")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SizeCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpecialNeeds")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SpeciesID")
                        .HasColumnType("int");

                    b.Property<string>("TemperamentNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("BreedID");

                    b.HasIndex("SpeciesID");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Canton", b =>
                {
                    b.Property<int>("CantonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CantonID"));

                    b.Property<string>("CantonCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CantonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.HasKey("CantonID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cantons");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<int>("CantonID")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CityID");

                    b.HasIndex("CantonID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Color", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorID"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ColorID");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Donation", b =>
                {
                    b.Property<int>("DonationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationID"));

                    b.Property<int?>("AcknowledgedByStaffID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AcknowledgementDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DonationTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("DonorID")
                        .HasColumnType("int");

                    b.Property<string>("PayPalPayerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PayPalStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PayPalTransactionID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TaxReceiptIssued")
                        .HasColumnType("bit");

                    b.HasKey("DonationID");

                    b.HasIndex("AcknowledgedByStaffID");

                    b.HasIndex("DonationTypeID");

                    b.HasIndex("DonorID");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.DonationType", b =>
                {
                    b.Property<int>("DonationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("TaxDeductible")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DonationTypeID");

                    b.ToTable("DonationTypes");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Donor", b =>
                {
                    b.Property<int>("DonorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonorID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DonorType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredContactMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalDonationsToDate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DonorID");

                    b.HasIndex("UserID");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShelterID")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("ShelterID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<int>("AdopterID")
                        .HasColumnType("int");

                    b.Property<int>("AnimalID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ShelterID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("AdopterID");

                    b.HasIndex("AnimalID");

                    b.HasIndex("ShelterID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordID"));

                    b.Property<int>("AnimalID")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VeterinarianID")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordID");

                    b.HasIndex("AnimalID");

                    b.HasIndex("VeterinarianID");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Reason", b =>
                {
                    b.Property<int>("ReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonID"));

                    b.Property<string>("ReasonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonID");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("ShelterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("ShelterID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Shelter", b =>
                {
                    b.Property<int>("ShelterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelterID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CantonID")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("CurrentOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OperatingHours")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ShelterID");

                    b.HasIndex("CantonID");

                    b.HasIndex("CityID");

                    b.ToTable("Shelters");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Species", b =>
                {
                    b.Property<int>("SpeciesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesID"));

                    b.Property<int>("AverageLifespan")
                        .HasColumnType("int");

                    b.Property<string>("CommonTraits")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SpeciesName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpeciesID");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffID"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ShelterID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StaffID");

                    b.HasIndex("ShelterID");

                    b.HasIndex("UserID");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResetPasswordExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.UserAnimalFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFavorited")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnimalFavorites");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Adopters+Adopter", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Canton", null)
                        .WithMany("Adopters")
                        .HasForeignKey("CantonID");

                    b.HasOne("BringMeHome.Services.Database.City", "City")
                        .WithMany("Adopters")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.AdoptionApplication", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Adopters+Adopter", null)
                        .WithMany("AdoptionApplications")
                        .HasForeignKey("AdopterID");

                    b.HasOne("BringMeHome.Services.Database.Animal", "Animal")
                        .WithMany("AdoptionApplications")
                        .HasForeignKey("AnimalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.Reason", "Reason")
                        .WithMany("AdoptionApplications")
                        .HasForeignKey("ReasonID");

                    b.HasOne("BringMeHome.Services.Database.Staff", "ReviewedBy")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewedByStaffID");

                    b.HasOne("BringMeHome.Services.Database.ApplicationStatus", "Status")
                        .WithMany("Applications")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.User", "User")
                        .WithMany("AdoptionApplications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Reason");

                    b.Navigation("ReviewedBy");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Animal", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Breed", "Breed")
                        .WithMany("Animals")
                        .HasForeignKey("BreedID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.Color", "Color")
                        .WithMany("Animals")
                        .HasForeignKey("ColorID");

                    b.HasOne("BringMeHome.Services.Database.Shelter", "Shelter")
                        .WithMany("Animals")
                        .HasForeignKey("ShelterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.Species", null)
                        .WithMany("Animals")
                        .HasForeignKey("SpeciesID");

                    b.HasOne("BringMeHome.Services.Database.AnimalStatus", "Status")
                        .WithMany("Animals")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.AnimalTemperament", "AnimalTemperament")
                        .WithMany("Animals")
                        .HasForeignKey("TempermentID");

                    b.Navigation("AnimalTemperament");

                    b.Navigation("Breed");

                    b.Navigation("Color");

                    b.Navigation("Shelter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Breed", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Species", "Species")
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Canton", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Country", "Country")
                        .WithMany("Cantons")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.City", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Canton", "Canton")
                        .WithMany("Cities")
                        .HasForeignKey("CantonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Canton");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Donation", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Staff", "AcknowledgedBy")
                        .WithMany()
                        .HasForeignKey("AcknowledgedByStaffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BringMeHome.Services.Database.DonationType", "DonationType")
                        .WithMany("Donations")
                        .HasForeignKey("DonationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AcknowledgedBy");

                    b.Navigation("DonationType");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Donor", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Event", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Feedback", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Adopters+Adopter", "Adopter")
                        .WithMany()
                        .HasForeignKey("AdopterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adopter");

                    b.Navigation("Animal");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.MedicalRecord", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.Staff", "Veterinarian")
                        .WithMany()
                        .HasForeignKey("VeterinarianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Review", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Shelter", "Shelter")
                        .WithMany()
                        .HasForeignKey("ShelterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Shelter", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Canton", null)
                        .WithMany("Shelters")
                        .HasForeignKey("CantonID");

                    b.HasOne("BringMeHome.Services.Database.City", "City")
                        .WithMany("Shelters")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Staff", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Shelter", "Shelter")
                        .WithMany("Staff")
                        .HasForeignKey("ShelterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shelter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.User", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.UserAnimalFavorite", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.UserRole", b =>
                {
                    b.HasOne("BringMeHome.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BringMeHome.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Adopters+Adopter", b =>
                {
                    b.Navigation("AdoptionApplications");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Animal", b =>
                {
                    b.Navigation("AdoptionApplications");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.AnimalStatus", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.AnimalTemperament", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.ApplicationStatus", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Breed", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Canton", b =>
                {
                    b.Navigation("Adopters");

                    b.Navigation("Cities");

                    b.Navigation("Shelters");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.City", b =>
                {
                    b.Navigation("Adopters");

                    b.Navigation("Shelters");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Color", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Country", b =>
                {
                    b.Navigation("Cantons");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.DonationType", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Donor", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Reason", b =>
                {
                    b.Navigation("AdoptionApplications");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Shelter", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Species", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.Staff", b =>
                {
                    b.Navigation("ReviewedApplications");
                });

            modelBuilder.Entity("BringMeHome.Services.Database.User", b =>
                {
                    b.Navigation("AdoptionApplications");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
